24 bit CPU

Unamed-24

UCC compiler

Not pipelined and no memory protection

For microcode -see code

Registers:
    AX- Accumulator
    IX- Indexer 1
    IIX- Indexer 2

Von-Neuman architecture 


First 5000 memory locations are general storage. 
Everything after 5000 is where the freestanding program is stored. 
The stack grows down from position 0xfffffe



"LABEL label_name" <- how you declare a label    

0x0 HLT - Halts the program
0x1 LDAD -Loads value directly into AX
0x2 LDAM -Loads from memory location into AX
0x3 STAD -Stores AX into certain memory location
0x4 PUSH -Pushes AX to the stack
0x5 POP  -Pops first element from the stack into AX
0x6 ADD  -ADDs 2 elements together from top to the stack to the bottom of the stack(reverse polish not.) 
0x7 SUB  -SUBs 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)
0x8 MUL  -SUBs 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)
0x9 DIV  -DIV 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)
0xa MOD  -MODs 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)
0xb XOR  -XORs 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)
0xc OR   -ORs 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)
0xd AND  -ANDs 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)
0xe LS   -Left shift 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)
0xf RS   -Right shift 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)
0x10 EQ  -Equal 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)(Condtion flag setter)
0x11 LT  -Less than 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)(Condtion flag setter)
0x12 GT  -Greater than 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)(Condtion flag setter)
0x13 NE  -Not Equal too 2 elements together from top to the stack to the bottom of the stack(reverse polish not.)(Condtion flag setter)
0x14 JMP -unconditional jump (Utilizes LABELS)
0x15 JC  -Conditonal jump. Checks Conditonal flag if 1 jump else continue exectution (Utilizes LABELS)
0x16 JNC -Not Conditonal jump. Checks Conditonal flag if 1 jump else continue exectution (Utilizes LABELS)
0x17 ADJM -Adjust the stack by using subtraction. 
0x18 CALL -Calls sub routine (Utilizes LABELS)
0x19 RET  -Returns from subroutine
0x1a IIPUSH -Pushes IIX register to the stack.
0x1b IIPOP  -Pops stack element into IIX register. 
0x1c LDID   -Loads direct value into IX register 
0x1d LDIM   -Loads from memory into IX
0x1e STID   -Stores IX into memory 
0x1f LDIID  -Loads direct into IIX register 
0x20 LDIIM  -Loads from memory into IIX
0x21 STIID  -Stores from memory into IX
0x22 LDIIA  -Loads from an offset of IIX into AX
0x23 LDIA   -Loads from an offset of IX into AX
0x24 INP    -In byte from AX (Not fully implemented)
0x25 OUTP   -Out byte into AX 
0x26 BPTOII -Moves Base pointer address to IIX
0x27 INCI   -Increments IX register
0x28 DECI   -Decremetns IX register
0x29 STIIA  -Stores AX in IIX offset
0x2a STIA   -Stores AX in IX offset
0x2b IPUSH  -Pushes IX to the stack
0x2c IPOP   -POPs into IX
0x2d ADJP   -Adjust the stack by using subtraction. 


32 x 11 ascii screen mapped to the first 352 memory locations

Assembler:
	LABEL [label name]
	labels can be jumped too.
	no comments in the asseembler.


C compiler syntax:
    Not too much on this one only pointers(no hex), conditonals, and arithmatic.You cannot force presedence /w parenthesis. There are no multiple conditions in a boolean. A boolean is NOT an expression. This is defenitly turing complete. No varibles. 
    
    *([pointer address]) = (some expression);
    *(0) = 900;
    *(0) = 1000 + 90; 
    *(*(9)) pointer to a pointer to a pointer
    You can make a pointer to a pointer to a pointer...
    //this is a commment 
This is how you can use an asm block.
	asm{
		LDAD 90
		STAD 0
	}
Example Program:
    int main(){
        while(*(0) < 100){
            if(*(0)<65){
            *(1) = *(0)
            }
        *(0) = *(0) + 1;
        }
    }

only 2 pinhole optimizations with C compiler.
No AST's

Error correction on the assembler and C compiler doesn't exist.

Updated entire CPU to 32 bit. For the operating system. But not for the main vanilla(whatever is in "src") or non opcoded src code. 

*Operating System In current development* No documentation yet
